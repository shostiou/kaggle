x=NULL
z=NULL
n=10000
z=rnorm(n)
x[1:13]=1
for(i in 14:n){
x[i]<-z[i]+0.7*z[i-1]+0.6*z[i-12]+0.42*z[i-13]
}
par(mfrow=c(2,1))
plot.ts(x[12:120], main='The first 10 months of simulation SARIMA(0,0,1,0,0)_12', ylab='')
acf(x, main='SARIMA(0,0,1,0,0,1)_12 Simulation')
x=NULL
z=NULL
n=10000
z=rnorm(n)
x[1:13]=1
for(i in 14:n){
x[i]<-z[i]+0.2*z[i-1]+0.3*z[i-2]+0.5*z[i-12]+0.1*z[i-13]+0.15*z[i-14]
}
x=NULL
z=NULL
n=10000
z=rnorm(n)
x[1:13]=1
for(i in 15:n){
x[i]<-z[i]+0.2*z[i-1]+0.3*z[i-2]+0.5*z[i-12]+0.1*z[i-13]+0.15*z[i-14]
}
par(mfrow=c(2,1))
plot.ts(x[12:120], main='The first 10 months of simulation SARIMA(0,0,1,0,0)_12', ylab='')
acf(x, main='SARIMA(0,0,1,0,0,1)_12 Simulation')
x=NULL
z=NULL
n=10000
z=rnorm(n)
x[1:13]=1
for(i in 15:n){
x[i]<-z[i]+0.2*z[i-1]+0.3*z[i-2]+0.5*z[i-12]+0.1*z[i-13]+0.15*z[i-14]
}
par(mfrow=c(2,1))
plot.ts(x[13:120], main='The first 10 months of simulation SARIMA(0,0,1,0,0)_12', ylab='')
acf(x, main='SARIMA(0,0,1,0,0,1)_12 Simulation')
x=NULL
z=NULL
n=10000
z=rnorm(n)
x[1:13]=1
for(i in 15:n){
x[i]<-z[i]+0.2*z[i-1]+0.3*z[i-2]+0.5*z[i-12]+0.1*z[i-13]+0.15*z[i-14]
}
par(mfrow=c(2,1))
plot.ts(x[14:120], main='The first 10 months of simulation SARIMA(0,0,1,0,0)_12', ylab='')
acf(x, main='SARIMA(0,0,1,0,0,1)_12 Simulation')
x=NULL
z=NULL
n=10000
z=rnorm(n)
x[1:13]=1
for(i in 14:n){
x[i]<-z[i]+0.7*z[i-1]+0.6*z[i-12]+0.42*z[i-13]
}
par(mfrow=c(2,1))
plot.ts(x[12:120], main='The first 10 months of simulation SARIMA(0,0,1,0,0)_12', ylab='')
acf(x, main='SARIMA(0,0,1,0,0,1)_12 Simulation')
x=NULL
z=NULL
n=10000
z=rnorm(n)
x[1:14]=1
for(i in 14:n){
x[i]<-z[i]+0.2*z[i-1]+0.3*z[i-2]+0.5*z[i-12]+0.1*z[i-13]+0.15*z[i-14]
}
x=NULL
z=NULL
n=10000
z=rnorm(n)
x[1:14]=1
for(i in 15:n){
x[i]<-z[i]+0.2*z[i-1]+0.3*z[i-2]+0.5*z[i-12]+0.1*z[i-13]+0.15*z[i-14]
}
par(mfrow=c(2,1))
plot.ts(x[12:120], main='The first 10 months of simulation SARIMA(0,0,1,0,0)_12', ylab='')
acf(x, main='SARIMA(0,0,1,0,0,1)_12 Simulation')
pacf(x, main='SARIMA(0,0,2,0,0,1)_12 Simulation')
acf(x, main='SARIMA(0,0,2,0,0,1)_12 Simulation')
pacf(x, main='SARIMA(0,0,2,0,0,1)_12 Simulation')
setwd("~/Documents/01 - DataScience/01 - R/kaggle/03-SVM")
url <- "https://raw.githubusercontent.com/PacktPublishing/Machine-Learning-with-R-Second-Edition/master/Chapter%2007/concrete.csv"
download.file(url,"concrete.csv")
concrete <- read.csv("concrete.csv")
str(concrete)
normalize <- function(x){
return((x-min(x))/(max(x)-min(x)))
}
concrete_norm <- as.data.frame(lapply(concrete,normalize))
summary(concrete$strength)
summary(concrete_norm$strength)
concrete_train <- concrete_norm[1:773,]
concrete_test <- concrete_norm[774:1030,]
install.packages("neuralnet")
library(neuralnet)
concrete_model <- neuralnet(strength ~ .,data = concrete_train )
plot(concrete_model)
model_results <- compute(concrete_model, concrete_test[1:8])
predicted.strength <- model_results$net.result
cor(predicted.strength, concrete_test$strength)
concrete_model2 <- neuralnet(strength ~ .,data = concrete_train, hidden=5 )
plot(concrete_model2)
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted.strength2 <- model_results2$net.result
cor(predicted.strength2, concrete_test$strength)
concrete_model2 <- neuralnet(strength ~ .,data = concrete_train, hidden=5 )
plot(concrete_model2)
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted.strength2 <- model_results2$net.result
cor(predicted.strength2, concrete_test$strength)
concrete_model3 <- neuralnet(strength ~ .,data = concrete_train, hidden=c(5,5,5) )
plot(concrete_model3)
model_results3 <- compute(concrete_model3, concrete_test[1:8])
predicted.strength3 <- model_results3$net.result
cor(predicted.strength3, concrete_test$strength)
concrete_model3 <- neuralnet(strength ~ .,data = concrete_train, hidden=c(10,5,3) )
plot(concrete_model3)
model_results3 <- compute(concrete_model3, concrete_test[1:8])
predicted.strength3 <- model_results3$net.result
cor(predicted.strength3, concrete_test$strength)
setwd("~/Documents/01 - DataScience/01 - R/stateunivny/Timeseries/W06")
milk<-read.csv('milk_production.csv')
Milk<-milk$Pounds
library(astsa)
sarima(Milk, 0,1,0,0,1,1,12)
milk<-read.csv('monthly-milk-production-pounds.csv')
Milk<-milk$Pounds
library(astsa)
sarima(Milk, 0,1,0,0,1,1,12)
library(astsa)
sarima(Milk, 0,1,0,0,1,1,12)
library(astsa)
sarima(Milk, 0,1,0,0,1,1,12)
library(astsa)
sarima(Milk, 0,1,0,0,1,1,12)
milk<-read.csv('monthly-milk-production-pounds.csv')
Milk<-milk$Pounds
milk<-read.csv('monthly-milk-production-pounds.csv')
Milk<-milk$Pounds
library(astsa)
sarima(Milk, 0,1,0,0,1,1,12)
library(astsa)
library(forecast)
d=NULL
DD=NULL
d=1
DD=1
per=12
for(p in 1:1){
for(q in 1:1){
for(i in 1:3){
for(j in 1:4){
if(p+d+q+i+DD+j<=10){
model<-arima(x=Milk, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),DD,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,DD,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model<- arima(x=Milk, order = c(0,1,0), seasonal = list(order=c(0,1,1), period=12))
plot(forecast(model))
forecast(model)
SUV<-read.csv('monthly-sales-for-a-souvenir-sho.csv')
SUV<-read.csv('monthly-sales-of-product-a-for-a.csv')
suv<-ts(SUV$Sales)
library(astsa)
library(forecast)
par(mfrow=c(2,2))
plot(suv, main='Monthly sales for a souvenir shop', ylab='', col='blue', lwd=3)
plot(log(suv), main='Log-transorm of sales', ylab='', col='red', lwd=3)
plot(diff(log(suv)), main='Differenced Log-transorm of sales', ylab='', col='brown', lwd=3)
plot(diff(diff(log(suv)),12), main='Log-transorm without trend and seasonaliy', ylab='', col='green', lwd=3)
data<-diff(diff((log(suv)),12))
acf2(data, 50)
d=1
DD=1
per=12
for(p in 1:2){
for(q in 1:2){
for(i in 1:2){
for(j in 1:4){
if(p+d+q+i+DD+j<=10){
model<-arima(x=log(suv), order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),DD,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,DD,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model<- arima(x=log(suv), order = c(1,1,0), seasonal = list(order=c(0,1,1), period=12))
plot(forecast(model))
forecast(model)
a<-sarima.for(log(suv),12,1,1,0,0,1,1,12)
plot.ts(c(suv,exp(a$pred)), main='Monthly sales + Forecast', ylab='', col='blue', lwd=3)
library(USAccDeaths)
plot(USAccDeaths)
plot(diff(USAccDeaths))
plot(diff(USAccDeaths,12))
plot(diff(USAccDeaths,12),main="differenced ts with 12 months span")
acData <- diff(diff(USAccDeaths,12))
plot(acData)
par(mfrow=c(2,1))
acf(acData)
pacf(acData)
acData <- diff(diff(USAccDeaths,12))
plot(acData)
par(mfrow=c(2,1))
acf(acData,50)
pacf(acData,50)
acData <- diff(diff(USAccDeaths,12))
plot(acData)
par(mfrow=c(2,1))
acf(acData,30)
pacf(acData,30)
acData <- diff(diff(USAccDeaths,12))
plot(acData)
par(mfrow=c(2,1))
acf2(acData,30)
pacf2(acData,30)
acData <- diff(diff(USAccDeaths,12))
plot(acData)
par(mfrow=c(2,1))
acf2(acData,30)
pacf(acData,30)
acData <- diff(diff(USAccDeaths,12))
plot(acData)
par(mfrow=c(2,1))
acf2(acData,30)
library(astsa)
sarima(USAccDeaths, 0,1,1,0,1,1,12)
library(astsa)
model<-sarima(USAccDeaths, 0,1,1,0,1,1,12)
model$ttable
plot(forecast(model))
sarima.for(model)
a<-sarima.for(USAccDeaths, 0,1,1,0,1,1,12)
a<-sarima.for(USAccDeaths, 12,0,1,1,0,1,1,12)
forecast(model)
model2<- arima(x=USAccDeaths, order = c(0,1,1), seasonal = list(order=c(0,1,1), period=12))
forecast(model2)
knitr::opts_chunk$set(echo = TRUE)
titanic_train_init <- read_csv('train.csv')
setwd("~/Documents/01 - DataScience/01 - R/kaggle/02-titanic")
library(tidyverse)
library(caret)
titanic_train_init <- read_csv('train.csv')
titanic_test_init <- read_csv('test.csv')
set.seed(50977)
i <- createDataPartition(titanic_train_init$PassengerId, p = 0.8, list=FALSE)
training <- titanic_train_init[i,]
testing <- titanic_train_init[-i,]
str(training)
# Passenger has survided (Y/N) response variable
training$Survived <- as.factor(training$Survived)
testing$Survived <- as.factor(testing$Survived)
# Passenger class (1st to 3rd)
training$Pclass <- as.factor(training$Pclass)
testing$Pclass <- as.factor(testing$Pclass)
titanic_test_init$Pclass <- as.factor(titanic_test_init$Pclass)
# Sex
training$Sex <- as.factor(training$Sex)
testing$Sex <- as.factor(testing$Sex)
titanic_test_init$Sex <- as.factor(titanic_test_init$Sex)
# Port of embarcation
training$Embarked <- as.factor(training$Embarked)
testing$Embarked <- as.factor(testing$Embarked)
titanic_test_init$Embarked <- as.factor(titanic_test_init$Embarked)
str(training)
str(training)
ggplot(training)+
geom_bar(mapping=aes(x=Survived,fill=Pclass))+
facet_wrap(~Pclass)
ggplot(training)+
geom_bar(mapping=(aes(x=Survived,fill=Sex)))+
facet_wrap(~Sex)
ggplot(training)+
geom_density(mapping = aes(Age,fill=Survived,col=Survived),bins=30, alpha=0.5)
training %>% filter (Fare<200) %>% ggplot()+
geom_density(mapping = aes(Fare,fill=Survived,col=Survived),bins=30, alpha=0.5)
training %>% ggplot()+
geom_bar(mapping=aes(x=Survived,fill=Embarked))+
facet_wrap(~Embarked)
training %>% ggplot()+
geom_bar(mapping=aes(x=Survived,fill=SibSp))+
facet_wrap(~SibSp)
training %>% ggplot()+
geom_jitter(mapping=aes(y=Survived,x=Parch))
svm_train <- training %>% select(-Name,-Ticket,-Cabin,-PassengerId)
svm_test <- testing %>% select(-Name,-Ticket,-Cabin,-PassengerId)
svm_valid <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
svm_lin_class <- ksvm(Survived~ .,data=svm_train,
kernel = "vanilladot")
svm_lin_class
svm_lin_pred <- predict(svm_lin_class,svm_test)
confusionMatrix(svm_lin_pred,testing$Survived)
confusionMatrix(svm_lin_pred,svm_test)
table(svm_lin_pred,svm_test)
table(svm_lin_pred,svm_test$Survived)
View(svm_test)
svm_lin_pred
svm_lin_pred
svm_test$Survived
svm_lin_pred <- predict(svm_lin_class,new_data=svm_test)
svm_lin_pred <- predict(svm_lin_class,svm_test)
svm_lin_pred
svm_test$Survived
svm_lin_pred <- predict(svm_lin_class,svm_test,type="response")
svm_lin_pred
svm_test$Survived
svm_lin_pred <- predict(svm_lin_class,newdata=svm_test,type="response")
svm_lin_pred
svm_test$Survived
svm_lin_pred
testing$Survived
svm_lin_pred
svm_test$Survived
training %>%
summarise_all(funs(sum(is.na(.)))) %>% t() / nrow(training)
training %>%
summarise_all(funs(sum(is.na(.)))) %>% t() / nrow(training)
median_age <- median(na.omit(training$Age))
training$Age[is.na(training$Age)] <- median_age
testing$Age[is.na(testing$Age)] <- median_age
titanic_test_init$Age[is.na(titanic_test_init$Age)] <- median_age
training$Embarked[is.na(training$Embarked)] <- 'S'
testing$Embarked[is.na(testing$Embarked)] <- 'S'
titanic_test_init$Embarked[is.na(titanic_test_init$Embarked)] <- 'S'
knn_train_x <- training %>% select(-Name,-Ticket,-Cabin,-PassengerId)
knn_test_x <- testing %>% select(-Name,-Ticket,-Cabin,-PassengerId)
knn_valid_x <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit <- train(Survived ~ ., data = knn_train_x, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
knnFit
knnPredict <- predict(knnFit,newdata = knn_test_x )
# Checking the confusion matrix
confusionMatrix(knnPredict, knn_test_x$Survived )
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
knnPredict <- predict(knnFit,newdata = knn_test_x )
# Checking the confusion matrix
confusionMatrix(knnPredict, testing$Survived )
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
knnPredict <- predict(knnFit,newdata = knn_test_x )
# Checking the confusion matrix
confusionMatrix(knnPredict, knn_test_x$Survived )
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
knnPredict <- predict(knnFit,newdata = knn_test_x )
# Checking the confusion matrix
confusionMatrix(knnPredict, knn_test_x$Survived )
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
knnPredict <- predict(knnFit,newdata = knn_test_x )
# Checking the confusion matrix
confusionMatrix(knnPredict, knn_test_x$Survived )
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
knn_valid_x %>%
summarise_all(funs(sum(is.na(.)))) %>% t() / nrow(training)
median_fare <- median(na.omit(training$Fare))
knn_valid_x$Fare[is.na(knn_valid_x$Fare)] <- median_fare
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
submission <- titanic_test_init
submission$PassengerId <- titanic_test_init$PassengerId
submission$Survived <- knnvalidPredict
submission <- submission %>% select(PassengerId,Survived)
write_csv(submission,'titanic_submission_knn.csv')
knnvalidtrain <- predict(knnFit)
confusionMatrix(knnvalidtrain,knn_train_x$Survived)
glm.fit <- glm(Survived ~ ., data = knn_train_x, family = binomial)
glm.probs <- predict(glm.fit,type = "response",newdata = knn_test_x)
glm.pred <- ifelse(glm.probs > 0.5, "1", "0")
glm.pred <- as.factor(glm.pred)
confusionMatrix(glm.pred, testing$Survived )
glm.fit <- glm(Survived ~ ., data = knn_train_x, family = binomial)
glm.probs <- predict(glm.fit,type = "response",newdata = knn_test_x)
glm.pred <- ifelse(glm.probs > 0.5, "1", "0")
glm.pred <- as.factor(glm.pred)
confusionMatrix(glm.pred, testing$Survived )
rf_model<-train(Survived~.,data=knn_train_x,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
rfPredict <- predict(rf_model,newdata = knn_test_x )
# Checking the confusion matrix
confusionMatrix(rfPredict, testing$Survived )
svm_train_x<- knn_train_x
levels(svm_train_x$Survived)=c("No","Yes")
ctrl <- trainControl(method = "cv", savePred=T, classProb=T)
svm_model <- train(Survived~., data=svm_train_x, method = "svmLinear", trControl = ctrl)
model_average <- (as.numeric(knnPredict)-1 + as.numeric(svm_Predict)-1 + as.numeric(glm.pred)-1) / 3
svm_train <- training %>% select(-Name,-Ticket,-Cabin,-PassengerId)
svm_test <- testing %>% select(-Name,-Ticket,-Cabin,-PassengerId)
svm_valid <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
library(kernlab)
svm_lin_class <- ksvm(Survived~ .,data=svm_train,
kernel = "vanilladot")
svm_lin_class
svm_lin_pred <- predict(svm_lin_class,newdata=svm_test,type="response")
svm_train <- knn_train_x
svm_test <- knn_test_x
svm_valid <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
library(kernlab)
svm_lin_class <- ksvm(Survived~ .,data=svm_train,
kernel = "vanilladot")
svm_lin_class
svm_lin_pred <- predict(svm_lin_class,newdata=svm_test,type="response")
svm_lin_pred
svm_test$Survived
confusionMatrix(svm_lin_pred,svm_test$Survived)
svm_rbf_class <- ksvm(Survived~ .,data=svm_train,
kernel = "rbfdot")
svm_rbd_pred <- predict(svm_rbf_class,newdata=svm_test,type="response")
svm_rbf_class <- ksvm(Survived~ .,data=svm_train,
kernel = "rbfdot")
svm_rbf_class
svm_rbd_pred <- predict(svm_rbf_class,newdata=svm_test,type="response")
svm_rbf_pred <- predict(svm_rbf_class,newdata=svm_test,type="response")
confusionMatrix(svm_rbf_pred,svm_test$Survived)
cost_values <- c(1,seq(from = 5, to = 40, by = 5))
accuracy_values <- sapply(cost_values, function(x){
set.seed(12345)
m <- ksvm(Survived ~ ., data=svm_train, kernel="rbfdot", C=x)
pred <- predict(m, svm_test)
agree <- ifelse(pred==svm_test$Survived,1,0)
accuracy <- sum(agree) / nrow(svm_test)
return(accuracy)
}  )
plot(cost_values,accuracy_values,type="b")
cost_values <- c(1,seq(from = 0.1, to = 5, by = 0.5))
accuracy_values <- sapply(cost_values, function(x){
set.seed(12345)
m <- ksvm(Survived ~ ., data=svm_train, kernel="rbfdot", C=x)
pred <- predict(m, svm_test)
agree <- ifelse(pred==svm_test$Survived,1,0)
accuracy <- sum(agree) / nrow(svm_test)
return(accuracy)
}  )
plot(cost_values,accuracy_values,type="b")
plot(cost_values,accuracy_values)
plot(cost_values,accuracy_values,type="b")
cost_values <- c(1,seq(from = 0.1, to = 4, by = 0.1))
accuracy_values <- sapply(cost_values, function(x){
set.seed(12345)
m <- ksvm(Survived ~ ., data=svm_train, kernel="rbfdot", C=x)
pred <- predict(m, svm_test)
agree <- ifelse(pred==svm_test$Survived,1,0)
accuracy <- sum(agree) / nrow(svm_test)
return(accuracy)
}  )
plot(cost_values,accuracy_values,type="b")
cost_values <- c(1,seq(from = 2, to = 3, by = 0.1))
accuracy_values <- sapply(cost_values, function(x){
set.seed(12345)
m <- ksvm(Survived ~ ., data=svm_train, kernel="rbfdot", C=x)
pred <- predict(m, svm_test)
agree <- ifelse(pred==svm_test$Survived,1,0)
accuracy <- sum(agree) / nrow(svm_test)
return(accuracy)
}  )
plot(cost_values,accuracy_values,type="b")
svm_rbf_class <- ksvm(Survived~ .,data=svm_train,
kernel = "rbfdot", C=2.5)
svm_rbf_class
svm_rbf_pred <- predict(svm_rbf_class,newdata=svm_test,type="response")
confusionMatrix(svm_rbf_pred,svm_test$Survived)
nn_train <- knn_train_x
nn_test <- knn_test_x
nn_valid <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
library(neuralnet)
normalize <- function(x){
return((x-min(x))/(max(x)-min(x)))
}
nn_class <- neuralnet(Survived~ .,data=nn_train)
nn_class <- neuralnet(Survived~ .,data=as.numeric(nn_train))
nn_class <- neuralnet(Survived~ .,data=remove.factors(nn_train))
nn_class <- neuralnet(Survived~ .,data=(nn_train))
nn_train <- as.numeric(knn_train_x)
nn_train <- as.numeric(unmist(knn_train_x))
nn_train <- as.numeric(unlist(knn_train_x))
nn_test <- knn_test_x
nn_valid <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
nn_train <- as.numeric((knn_train_x))
nn_train <- knn_train_x
nn_test <- knn_test_x
nn_valid <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
View(knn_train_x)
install.packages('taRifx')
library(taRifx)
nn_train <- remove.factors(knn_train_x)
nn_test <- remove.factors(knn_test_x)
nn_valid <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
nn_class <- neuralnet(Survived~ .,data=(nn_train))
View(nn_train)
nn_train <- (knn_train_x)
nn_test <- (knn_test_x)
nn_valid <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
nn_class <- neuralnet(Survived~ PClass+Age+SibSp+Parch+Fare,data=(nn_train))
nn_class <- neuralnet(Survived~ Pclass+Age+SibSp+Parch+Fare,data=(nn_train))
nn_train <- remove.factors(knn_train_x)
nn_test <- remove.factors(knn_test_x)
nn_valid <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
library(neuralnet)
nn_class <- neuralnet(Survived~ Pclass+Age+SibSp+Parch+Fare,data=(nn_train))
nn_class <- neuralnet(Survived~ Age+Fare,data=(nn_train))
plot(nn_class)
nn_class <- neuralnet(Survived~ Age+Pclass+Fare,data=(nn_train))
